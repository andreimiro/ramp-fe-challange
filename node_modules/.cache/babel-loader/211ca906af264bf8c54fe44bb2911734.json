{"ast":null,"code":"var _jsxFileName = \"/Users/andreimiro/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useState, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    const handleScroll = () => {\n      const inputElement = document.querySelector('.RampInputSelect--input');\n\n      if (isOpen && inputElement instanceof Element) {\n        setDropdownPosition(getDropdownPosition(inputElement));\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [isOpen]);\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    onStateChange: _ref2 => {\n      let {\n        isOpen: openState\n      } = _ref2;\n\n      if (typeof openState !== 'undefined') {\n        setIsOpen(openState);\n      }\n    },\n    children: _ref3 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref3;\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--input\",\n          onClick: event => {\n            setDropdownPosition(getDropdownPosition(event.target));\n            toggleProps.onClick(event);\n          },\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            top: dropdownPosition.top,\n            left: dropdownPosition.left\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this);\n\n      function renderItems() {\n        if (!isOpen) {\n          return null;\n        }\n\n        if (isLoading) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: [loadingLabel, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 32\n          }, this);\n        }\n\n        if (items.length === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: \"No items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 32\n          }, this);\n        }\n\n        return items.map((item, index) => {\n          const parsedItem = parseItem(item);\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getItemProps({\n              key: parsedItem.value,\n              index,\n              item,\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                \"RampInputSelect--dropdown-item-selected\": (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.value) === parsedItem.value\n              })\n            }),\n            children: parsedItem.label\n          }, parsedItem.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 29\n          }, this);\n        });\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(InputSelect, \"paT9kSpmyaIAl2raHRO3q/Z8qN8=\");\n\n_c = InputSelect;\n\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const {\n      top,\n      left\n    } = target.getBoundingClientRect();\n    const {\n      scrollY\n    } = window;\n    return {\n      top: scrollY + top + 63,\n      left\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","useEffect","classNames","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","isOpen","setIsOpen","handleScroll","inputElement","document","querySelector","Element","getDropdownPosition","window","addEventListener","removeEventListener","selectedItem","item","openState","getItemProps","getLabelProps","getMenuProps","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","parsedSelectedItem","event","target","onClick","renderItems","length","map","index","parsedItem","key","value","className","getBoundingClientRect","scrollY"],"sources":["/Users/andreimiro/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\"\nimport {useCallback, useState, useEffect} from \"react\"\nimport classNames from \"classnames\"\nimport {DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps} from \"./types\"\n\nexport function InputSelect<TItem>({\n                                       label,\n                                       defaultValue,\n                                       onChange: consumerOnChange,\n                                       items,\n                                       parseItem,\n                                       isLoading,\n                                       loadingLabel,\n                                   }: InputSelectProps<TItem>) {\n    const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n    const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n        top: 0,\n        left: 0,\n    })\n    const [isOpen, setIsOpen] = useState(false);\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const inputElement = document.querySelector('.RampInputSelect--input');\n            if (isOpen && inputElement instanceof Element) {\n                setDropdownPosition(getDropdownPosition(inputElement));\n            }\n        };\n\n        window.addEventListener('scroll', handleScroll);\n\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, [isOpen]);\n\n\n    const onChange = useCallback<InputSelectOnChange<TItem>>(\n        (selectedItem) => {\n            if (selectedItem === null) {\n                return\n            }\n\n            consumerOnChange(selectedItem)\n            setSelectedValue(selectedItem)\n        },\n        [consumerOnChange]\n    )\n\n    return (\n        <Downshift<TItem>\n            id=\"RampSelect\"\n            onChange={onChange}\n            selectedItem={selectedValue}\n            itemToString={(item) => (item ? parseItem(item).label : \"\")}\n            onStateChange={({isOpen: openState}) => {\n                if (typeof openState !== 'undefined') {\n                    setIsOpen(openState);\n                }\n            }}\n        >\n            {({\n                  getItemProps,\n                  getLabelProps,\n                  getMenuProps,\n                  isOpen,\n                  highlightedIndex,\n                  selectedItem,\n                  getToggleButtonProps,\n                  inputValue,\n              }) => {\n                const toggleProps = getToggleButtonProps()\n                const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n\n                return (\n                    <div className=\"RampInputSelect--root\">\n                        <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n                            {label}\n                        </label>\n                        <div className=\"RampBreak--xs\"/>\n                        <div\n                            className=\"RampInputSelect--input\"\n                            onClick={(event) => {\n                                setDropdownPosition(getDropdownPosition(event.target))\n                                toggleProps.onClick(event)\n                            }}\n                        >\n                            {inputValue}\n                        </div>\n\n                        <div\n                            className={classNames(\"RampInputSelect--dropdown-container\", {\n                                \"RampInputSelect--dropdown-container-opened\": isOpen,\n                            })}\n                            {...getMenuProps()}\n                            style={{top: dropdownPosition.top, left: dropdownPosition.left}}\n                        >\n                            {renderItems()}\n                        </div>\n                    </div>\n                )\n\n                function renderItems() {\n                    if (!isOpen) {\n                        return null\n                    }\n\n                    if (isLoading) {\n                        return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n                    }\n\n                    if (items.length === 0) {\n                        return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n                    }\n\n                    return items.map((item, index) => {\n                        const parsedItem = parseItem(item)\n                        return (\n                            <div\n                                key={parsedItem.value}\n                                {...getItemProps({\n                                    key: parsedItem.value,\n                                    index,\n                                    item,\n                                    className: classNames(\"RampInputSelect--dropdown-item\", {\n                                        \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                                        \"RampInputSelect--dropdown-item-selected\":\n                                            parsedSelectedItem?.value === parsedItem.value,\n                                    }),\n                                })}\n                            >\n                                {parsedItem.label}\n                            </div>\n                        )\n                    })\n                }\n            }}\n        </Downshift>\n    )\n}\n\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\n    if (target instanceof Element) {\n        const {top, left} = target.getBoundingClientRect()\n        const {scrollY} = window\n        return {\n            top: scrollY + top + 63,\n            left,\n        }\n    }\n\n    return {top: 0, left: 0}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}