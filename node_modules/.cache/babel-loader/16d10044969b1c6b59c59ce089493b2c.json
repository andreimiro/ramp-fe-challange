{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const fetchById = useCallback(async employeeId => {\n    let requestData;\n\n    if (employeeId === \"ALL_EMPLOYEES\") {\n      requestData = {\n        employeeId: \"ALL\"\n      }; // Use a special value to indicate all employees\n    } else {\n      requestData = {\n        employeeId\n      };\n    }\n\n    const data = await fetchWithCache(\"transactionsByEmployee\", requestData);\n    setTransactionsByEmployee(data);\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData\n  };\n}\n\n_s(useTransactionsByEmployee, \"kKvyfBKX5wcdmUqML83LxPYcyfE=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","requestData","data","invalidateData"],"sources":["/Users/andreimiro/Downloads/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n    const fetchById = useCallback(\n        async (employeeId: string) => {\n            let requestData: RequestByEmployeeParams;\n\n            if (employeeId === \"ALL_EMPLOYEES\") {\n                requestData = { employeeId: \"ALL\" }; // Use a special value to indicate all employees\n            } else {\n                requestData = { employeeId };\n            }\n\n            const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n                \"transactionsByEmployee\",\n                requestData\n            )\n\n            setTransactionsByEmployee(data)\n        },\n        [fetchWithCache]\n    )\n\n    const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EAEE,MAAMO,SAAS,GAAGR,WAAW,CACzB,MAAOS,UAAP,IAA8B;IAC1B,IAAIC,WAAJ;;IAEA,IAAID,UAAU,KAAK,eAAnB,EAAoC;MAChCC,WAAW,GAAG;QAAED,UAAU,EAAE;MAAd,CAAd,CADgC,CACK;IACxC,CAFD,MAEO;MACHC,WAAW,GAAG;QAAED;MAAF,CAAd;IACH;;IAED,MAAME,IAAI,GAAG,MAAMP,cAAc,CAC7B,wBAD6B,EAE7BM,WAF6B,CAAjC;IAKAH,yBAAyB,CAACI,IAAD,CAAzB;EACH,CAhBwB,EAiBzB,CAACP,cAAD,CAjByB,CAA7B;EAoBA,MAAMQ,cAAc,GAAGZ,WAAW,CAAC,MAAM;IACzCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFmC,EAEjC,EAFiC,CAAlC;EAIF,OAAO;IAAEI,IAAI,EAAEL,sBAAR;IAAgCD,OAAhC;IAAyCG,SAAzC;IAAoDI;EAApD,CAAP;AACD;;GA7BeT,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}